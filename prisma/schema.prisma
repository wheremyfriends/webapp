// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Convention is singular, CamelCase
model AuthUser {
  user     User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID   Int    @id
  username String @unique
  password String

  @@map("authuser")
}

model Lesson {
  id         Int    @id @default(autoincrement())
  module     Module @relation(fields: [moduleID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moduleID   Int
  lessonType String
  classNo    String

  @@unique([moduleID, lessonType, classNo])
  @@map("lesson")
}

model Module {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID     Int
  semester   Int
  moduleCode String
  colorIndex Int
  lessons    Lesson[]

  @@unique([userID, semester, moduleCode])
  @@map("module")
}

model User {
  id       Int              @id @default(autoincrement())
  rooms    UsersOnRooms[]
  module   Module[]
  authUser AuthUser?
  config Config?
  solution Solution?

  @@map("user")
}

model Room {
  id    Int              @id @default(autoincrement())
  uri   String           @unique
  users UsersOnRooms[]

  @@map("room")
}

model UsersOnRooms {
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID Int
  room   Room   @relation(fields: [roomID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomID Int
  name   String

  @@id([userID, roomID])
  @@unique([roomID, name])
  @@map("user_room")
}

model Solution {
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID Int @id
  data Json

  @@map("solution")
}

model Config {
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userID Int @id
  data Json

  @@map("config")
}
